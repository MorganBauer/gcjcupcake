GCJ Cupcake by jbernadas, v1.0 beta
Download and submit tool for the Google Code Jam
-------------------------------------------------------------------------------
TABLE OF CONTENTS:

0. Disclaimer
1. Prerequisites
2. Basic usage
  a. Configuring the system
  b. Initializing the contest
  c. Downloading an input
  d. Submitting a solution
3. Configuration files
4. Executable files
  a. Contest crawler
  b. Login agent
  c. Input downloader
  d. Solution submitter

-------------------------------------------------------------------------------
0. DISCLAIMER

GCJ Cupcake by jbernadas, v1.0 beta3
Copyright (C) 2010  Jorge Bernadas (jbernadas@gmail.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
Copyright (c) 2010  Jorge Bernadas (a.k.a. jbernadas)

-------------------------------------------------------------------------------
1. PREREQUISITES

To install this software, just copy these files into any folder and execute the
scripts from the main folder (the one that contains this file).

To run the executable scripts, you will need Python 2.6, which can be
downloaded from <http://www.python.org/download/releases/>. This was developed
and tested using Python 2.6.5, so we recommend using 2.6.5 or superior.

-------------------------------------------------------------------------------
2. BASIC USAGE

To use this tool, open a terminal at the main folder (the one that contains
this file). Executables in the commands folders expect to be run from this
directory, otherwise, they will not find the configuration files in the
commands/config/ directory.

To ease executing these program, shell scripts (.bat for Windows computers) are
provided, which just call the corresponding executable with the same
parameters. You are free to modify these shell scripts to always pass some
parameters or any other reason you see fit.


2a. Configuring the system

Before attempting to run an executable included with this software, you should 
configure the system by writing some needed information in the user
configuration file, located at ./commands/config/user_config.py. This file is
formatted as a Python dict structure, but a basic one is be included with this
software. Three values are needed to run the software:

- host: The name of the website hosting the contest. For normal contests and
  for the remaining of this example, the host is 'code.google.com'.

- user: Your google account, for example 'myaccount@gmail.com'.

- source_names_format: This is a list of strings that specify the default
  sources to be included with an output file. In this example, we will assume
  we use C++ and set it to ['{problem}-{input}-{id}.cpp'].

Look at Section 3 for more information about these and many more configuration
parameters.


2b. Initializing the contest

The first step to use this software is initializing the contest. To do this
you have to specify the contest id, which can be found in the dashboard URL
for that contest. For example, for the GCJ 2010 Qualification Round the
dashboard URL is:

http://code.google.com/codejam/contest/dashboard?c=433101

so you can initialize the contest executing:

$ ./init-contest 433101

During this step, the software logs into Code Jam servers (he may ask you your
password) and extracts information from the contest, including the problems id
and names and the middleware tokens required to transfer information.

Then, all this information, including the login cookie and the information in
the user configuration file, is stored in the current configuration file (found
at ./commands/config/current_config.py).

NOTE: Your password is not stored in the current configuration file if you did
not entered it in the user configuration file.


2c. Downloading an input

Once you coded a solution and think you got it right, you may download an input
using the download-input script. This script receives the problem letter (A, B
or C for the GCJ10 Qual), the input type (small or large) and an id to
differentiate it from other attempts.

For example, to download a small input for the problem A, Snapper Chain, you
can execute:

$ ./download-input A small 0

which will download the input file and store it in ./source/A-small-0.in. Now
it is time to run your solution and generate the output file.

NOTE: This script downloads an input file for the specified problem and starts
its timer without asking a confirmation. You should double-check the
parameters before running it or you might end starting a timer for other
problem.

NOTE: Downloading an input file twice in the same attempt will just redownload
the same input file if its time has *NOT* expired. Otherwise, it will download
another input and start another attempt for small inputs.


2d. Submitting a solution

After running your solution and generating the output, it is time to submit the
output file with the source files using the submit-solution script. This script
receives the problem letter, the input type and the id used when the input was
downloaded.

For example, to submit the solution for the small input of problem A, Snapper
Chain, you can execute:

$ ./submit-solution A small 0

which will submit the file ./source/A-small-0.out as the answer and
./source/A-small-0.cpp as the only source file. If you want to add extra source
file, you may use the -a flag as many times you need. For example, if you want
to submit an extra file called library.cpp you can execute:

$ ./submit-solution -a library.cpp A small 0

which will submit the file ./source/A-small-0.out as the answer and
./source/A-small-0.cpp and ./library.cpp as the source files. If you add a
directory using the -a option, the program will compress it into a zip file
before submitting it.

After submitting the file, the Code Jam server will answer with a message
string. The most important values are:

- 'Wrong Answer': Your solution for the small input was wrong, try again.
- 'Good Job!': Your solution for the small input was right, congratulations!
- 'Your answer has been received and will be judged at the end of the contest.':
  This is received after submitting the output for the large input.

-------------------------------------------------------------------------------
3. CONFIGURATION FILES

This tool needs one configuration file to run, which can be located at
./commands/config/user_config.py. This file is formatted as a python dict
structure and may have the following keys:

- 'host' : The name of the website hosting the contest. For normal contests,
  it is 'code.google.com'.

- 'user' : Your google account, the '@gmail.com' might be omitted for contests
  in 'code.google.com'.

- 'password' : The password for your google account. This value is optional, if
  it is not found the executables will ask for it when necessary.

- 'data_directory' : Directory where input files are written and the output and
  main source file is read from. This value is optional, if not specified it
  will default to './source'.

- 'input_name_format' : Format used to generate filenames for input files,
  where '{problem}' will be substituted for the problem letter, '{input}' for
  the input type (small or large) and '{id}' for the submit id. This value is
  optional, if not specified it will default to '{problem}-{input}-{id}.in'.

- 'output_name_format' : Format used to generate filenames for output files,
  whose format is similar to the input format. This value is optional, if not
  specified it will default to '{problem}-{input}-{id}.out'.

- 'source_names_format' : List with filename formats for the source files
  included by default; each list value must be formatted in the same way as the
  input name format. This value is *NOT* optional, to prevent accidental
  submits of outputs with no source files.

All these values (with the exception of 'host', 'user' and
'source_names_format') can be overriden in the executables by using command
line options. When these values are specified in the command line, the values
in the configuration files and the defaults values are ignored.

For the input, output and source format the final filename is generated using
Python str.format() function.

If you want to change the path of the configuration files, look at the
./commands/gcj_cupcake/Constants.py file and change the respective variables.
Remember that those paths are relative to the current directory, not to the
./commands directory.

IMPORTANT: Most executables do not use the user configuration file, they use
a current configuration file (./commands/config/current_config.py) which is
generated when the contest is initialized. If you want to change something
during a contest, either change user_config.py and reinitialize the contest or
make the change directly in current_config.py.

-------------------------------------------------------------------------------
4. EXECUTABLE FILES

This tool is composed by four executables, one to initialize the tool for a
contest, one to download inputs, one to submit solutions and finally one to
login in the Google servers, just in case the login cookie becomes invalid.

All executables provide a --version and a --help options. These options will
show the current tool version and a list with all the possible options for the
exectuable, including a brief description of each one.

As said before, all executables might require your Google password if you do
not specify it in the configuration file. Another option is to pass the
password using the option --passwd, just be careful that specifying the password
this way will be visible in your screen and will be stored in the commands
history.

The executables to download input and submit outputs support a --login option;
if this option is specified the current login cookie will be ignored and a new
one will be requested. Beware that this might cause the executables to ask for
your password.


4a. Contest crawler

This executable is the init-contest script, and its contents can be found at the
commands/init_contest.py file. This executable receives one positional argument
which is the contest id (see Section 2b for instructions on how to retrieve a
contest id), that is used to retrieve the important information of the contest,
i.e., number of problems, middleware authentication tokens, problem ids, etc.

This executable should be run before each contest, so the correct information
is retrieved. Otherwise, unexpected behaviour might occur.


4b. Login agent

This executable is the renew-login script, and its contents can be found at the
commands/renew_login.py file. This executable receives no positional arguments,
and will renew the login cookie in the current configuration file with a new
one.

This executable should not be used under regular operation, this is just
included in case your login cookie expires or becomes invalid during a contest.


4c. Input downloader

This executable is the download-input script, and its contents can be found at
commands/download_input.py file. This executable receives three positional
arguments, the problem letter, the input size ('small' or 'large') and a submit
id. Both the problem letter and the input size are converted to lowercase
before using them, but the id is case-sensitive.

This executable downloads the specified input and stores it in a file inside the
data directory. However, the flags --data-directory and --input-name are
provided to override the default values and the ones in the configuration files.


4d. Solution submitter

This executable is the submit-solution script, and its contents can be found at
commands/submit_solution.py file. This executable receives three positional
arguments, the problem letter, the input size ('small' or 'large') and a submit
id. Similar to the input downloader, both the problem letter and the input size
are converted to lowercase before using them, but the id is case-sensitive.

If a directory is specified as an output file, this executable will zip it into
a file before submitting, so the whole folder can be sent to the server.

By default this executable submits the specified output files along with the
additional default source files specified in the configuration file. However,
this executable provides many options to alter its default behaviour:

- Similar to the input downloader, the --data-directory option can be used to
  choose another data directory, and the --output-name option can be used to
  change the default name of the output file.

- If additional source files are needed, the --add-source option can be used to
  submit them along with the output files.

- If the source files being uploaded are to big, the --zip-sources option can be
  used to zip all the source files into a single file before submitting. This
  options is smart and will not zip already zipped files.

- The --ignore-zip option will indicate that all zip files inside a included
  directory should be ignored, otherwise they will be added. However, zip files
  specified directly in the source configuration or using the --add-source will
  be included.

- The --ignore-default-source option will indicate that all default source files
  in the configuration file should be ignored, and only source files specified
  through the --add-source option should be sent.

- There are two different encondings to send the output to the server. If the
  --gzip-content flag is specified the output and the source files will be
  sent using gzip; if the --plain-content flag is specified the output and the
  source files will be sent using text/plain. If no flag is specified, the data
  will be sent using gzip.
